.page-header
  = link_to new_employee_path, :class => 'btn btn-default btn-sm' do
    span.glyphicon.glyphicon-plus New
  h2 Employees
  h5.text-success
    => params[:show_all].present? ? 'Current and Terminated Employees' : 'Current Employees'
    => params[:payroll].present? ? 'on the Payroll' : 'including NOT on the Payroll'
    - if params[:q].present?
      => " ~ filtering names or surnames containing \"#{params[:q]}\""
    - if params[:surname_start].present?
      => ' ~ showing only surnames starting with'
      => params[:surname_start].upcase
    => ' ~ ordered by '
    = params[:order].present? ? params[:order] : 'Surname'

.row.roses-row
  = form_tag filter_employees_path, :method => :post do
    .form-inline
      .form-group.col-md-4
        /=<> label_tag 'Names or Surnames containing:'
        b<> Names or Surnames containing:
        = text_field_tag :q, params[:q], class: 'form_control', style: 'width:140px;'
      .form-group.col-md-2
        b<> Service Terminated:
        =<> check_box_tag :show_all, true,  params[:show_all].present? ? true : false, {class: 'form_control'}
      .form-group.col-md-2
        b<> Payroll Only:
        =<> check_box_tag  :payroll, true, params[:payroll], {class: 'form_control'}
      .form-group.col-md-2
        => label_tag 'Order by'
        =< select_tag :order, options_for_select(%w(Sort Finger Name Surname), params[:order].present? ? params[:order] : 'Surname')
      .form-group.col-md-2
        span.pull-right
          button.btn.btn-success.btn-sm [type='submit']
            span.glyphicon.glyphicon-refresh

.row
  .col-md-12
    - letters = Employee.all.collect { |s| s.surname[0] }.uniq
    - ('A'..'Z').each do |l|
      span.link-letter
        - if letters.include?(l)
          = link_to l, url_for(params.merge(surname_start: l)), class: 'btn btn-default btn-xs'
        - else
          = l
    span< surnames starting with  . . . ( including filter above )

hr

.table-responsive
  table.table-condensed.table.table-hover
    thead
      tr
        th Sort
        th Finger
        th Name
        th Surname
        th Term
        th Pay
        th Employed
        th.col-md-2 Until
    tbody
      - @employees.each do | employee |
        - rowclass = employee.term == 'P' ? 'text-primary' : ''
        - rowclass = 'warning' if employee.employed_to <= Date.today
        tr class="#{rowclass}"
          td= employee.sort
          td= employee.long_finger
          td= employee.name.capitalize
          td= employee.surname.capitalize
          td= employee.term == 'P' ? 'Perm' : 'Temp'
          td= employee.include_in_payroll? ? 'P' : ''
          td= employee.employed_from.strftime('%d %b %Y')
          td: span.small
            - if employee.employed_to <= Date.today
              =<> employee.employed_to.strftime('%d %b %Y')
            - if employee.employed_to <= Date.today
              =<> distance_of_time_in_words employee.employed_from, employee.employed_to
            - else
              =<> distance_of_time_in_words_to_now employee.employed_from
          td
            span.pull-right
              => link_to employee, class: 'btn btn-default btn-xs' do
                i.glyphicon.glyphicon-eye-open
              => link_to edit_employee_path(employee), class: 'btn btn-default btn-xs' do
                i.glyphicon.glyphicon-pencil
              = link_to employee, method: :delete, data: { confirm: 'Are you sure?' }, class: 'btn btn-default btn-xs' do
                i.glyphicon.glyphicon-trash
